# Generated from lib/rbs_rails/active_record.rb with RBS::Inline

module RbsRails
  module ActiveRecord
    # @rbs klass: untyped
    def self.generatable?: (untyped klass) -> boolish

    # @rbs klass: untyped
    # @rbs dependencies: Array[String]
    def self.class_to_rbs: (untyped klass, ?dependencies: Array[String]) -> untyped

    class Generator
      IGNORED_ENUM_KEYS: Array[Symbol]

      @klass_name: String

      @enum_definitions: Array[Hash[Symbol, untyped]]

      @dependencies: Array[String]

      @parse_model_file: nil | Parser::AST::Node

      # @rbs klass: singleton(ActiveRecord::Base) & Enum
      # @rbs dependencies: Array[String]
      def initialize: (singleton(ActiveRecord::Base) & Enum klass, dependencies: Array[String]) -> untyped

      def generate: () -> String

      private def klass_decl: () -> String

      private def pk_type: () -> String

      private def generated_relation_methods_decl: () -> String

      private def relation_decl: () -> String

      private def collection_proxy_decl: () -> String

      private def header: () -> String

      private def footer: () -> String

      private def associations: () -> String

      private def has_many: () -> String

      private def has_and_belongs_to_many: () -> String

      private def has_one: () -> String

      private def belongs_to: () -> String

      private def generated_association_methods: () -> String

      # @rbs singleton: bool
      private def delegated_type_scope: (singleton: bool) -> String

      private def delegated_type_instance: () -> String

      private def delegated_type_definitions: () -> Array[{ role: Symbol, types: Array[String] }]?

      private def has_secure_password: () -> String?

      private def enum_instance_methods: () -> String

      # @rbs singleton: untyped
      private def enum_class_methods: (singleton: untyped) -> String

      # @rbs singleton: untyped
      private def scopes: (singleton: untyped) -> untyped

      # @rbs args_node: untyped
      private def args_to_type: (untyped args_node) -> untyped

      private def pluck_overloads: () -> String

      private def pluck_overloads_instance: () -> String

      private def parse_model_file: () -> untyped

      # : (Parser::AST::Node) { (Parser::AST::Node) -> untyped } -> untyped
      # : (Parser::AST::Node) -> Enumerator[Parser::AST::Node, untyped]
      private def traverse: (Parser::AST::Node) { (Parser::AST::Node) -> untyped } -> untyped
                          | (Parser::AST::Node) -> Enumerator[Parser::AST::Node, untyped]

      private def relation_class_name: () -> String

      # @rbs abs: boolish
      private def klass_name: (?abs: boolish) -> String

      private def generated_relation_methods_name: () -> String

      private def columns: () -> untyped

      private def alias_columns: () -> untyped

      # @rbs class_name: String
      private def optional: (String class_name) -> String

      # @rbs t: untyped
      private def sql_type_to_class: (untyped t) -> untyped

      private

      attr_reader klass: singleton(ActiveRecord::Base) & Enum
    end
  end
end
