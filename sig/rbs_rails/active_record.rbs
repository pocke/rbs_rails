module RbsRails::ActiveRecord
  def self.class_to_rbs: (untyped klass, ?dependencies: Array[String]) -> untyped
  def self.generatable?: (untyped klass) -> boolish
end

class RbsRails::ActiveRecord::Generator
  @parse_model_file: nil | Parser::AST::Node
  @dependencies: Array[String]

  def initialize: (singleton(ActiveRecord::Base) klass, dependencies: Array[String]) -> untyped

  def generate: () -> String

  def klass_decl: () -> String

  def pk_type: () -> String

  def generated_relation_methods_decl: () -> String

  def relation_decl: () -> String

  def collection_proxy_decl: () -> String

  def header: () -> String

  def footer: () -> String

  def associations: () -> String

  def has_many: () -> String

  def has_one: () -> String

  def belongs_to: () -> String

  def generated_association_methods: () -> String

  def delegated_type_scope: (singleton: bool) -> String

  def delegated_type_instance: () -> String

  def delegated_type_definitions: () -> Array[Hash[Symbol, untyped]]?

  def has_secure_password: () -> String?

  def enum_instance_methods: () -> String

  def enum_scope_methods: (singleton: untyped `singleton`) -> String

  def enum_definitions: () -> Array[Hash[Symbol, untyped]]

  # We need static analysis to detect enum.
  # ActiveRecord has `defined_enums` method,
  # but it does not contain _prefix and _suffix information.
  def build_enum_definitions: () -> Array[Hash[Symbol, untyped]]

  def enum_method_name: (Hash[Symbol, untyped] hash, Symbol name, Symbol label) -> String

  def scopes: (singleton: untyped `singleton`) -> untyped

  def parameters_to_type: (untyped args_node) -> untyped

  def relation_class_name: () -> untyped

  def columns: () -> untyped

  def sql_type_to_class: (untyped t) -> untyped

  def optional: (String) -> String

  private

  attr_reader klass: singleton(ActiveRecord::Base)

  attr_reader klass_name: String
end
