# resolve-type-names: false

class ::Thumbnail < ::ApplicationRecord
  extend ::ActiveRecord::Base::ClassMethods[::Thumbnail, ::Thumbnail::ActiveRecord_Relation, ::Integer]

  module ::Thumbnail::GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def id_before_type_cast: () -> ::Integer

    def id_for_database: () -> ::Integer

    def blog_id: () -> ::Integer

    def blog_id=: (::Integer) -> ::Integer

    def blog_id?: () -> bool

    def blog_id_changed?: () -> bool

    def blog_id_change: () -> [ ::Integer?, ::Integer? ]

    def blog_id_will_change!: () -> void

    def blog_id_was: () -> ::Integer?

    def blog_id_previously_changed?: () -> bool

    def blog_id_previous_change: () -> ::Array[::Integer?]?

    def blog_id_previously_was: () -> ::Integer?

    def blog_id_before_last_save: () -> ::Integer?

    def blog_id_change_to_be_saved: () -> ::Array[::Integer?]?

    def blog_id_in_database: () -> ::Integer?

    def saved_change_to_blog_id: () -> ::Array[::Integer?]?

    def saved_change_to_blog_id?: () -> bool

    def will_save_change_to_blog_id?: () -> bool

    def restore_blog_id!: () -> void

    def clear_blog_id_change: () -> void

    def blog_id_before_type_cast: () -> ::Integer

    def blog_id_for_database: () -> ::Integer

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def created_at_before_type_cast: () -> ::Time

    def created_at_for_database: () -> ::Time

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def updated_at_before_type_cast: () -> ::Time

    def updated_at_for_database: () -> ::Time
  end
  include ::Thumbnail::GeneratedAttributeMethods
  module ::Thumbnail::GeneratedAliasAttributeMethods
    include ::Thumbnail::GeneratedAttributeMethods

    alias id_value id

    alias id_value= id=

    alias id_value? id?

    alias id_value_changed? id_changed?

    alias id_value_change id_change

    alias id_value_will_change! id_will_change!

    alias id_value_was id_was

    alias id_value_previously_changed? id_previously_changed?

    alias id_value_previous_change id_previous_change

    alias id_value_previously_was id_previously_was

    alias id_value_before_last_save id_before_last_save

    alias id_value_change_to_be_saved id_change_to_be_saved

    alias id_value_in_database id_in_database

    alias saved_change_to_id_value saved_change_to_id

    alias saved_change_to_id_value? saved_change_to_id?

    alias will_save_change_to_id_value? will_save_change_to_id?

    alias restore_id_value! restore_id!

    alias clear_id_value_change clear_id_change

    alias id_value_before_type_cast id_before_type_cast

    alias id_value_for_database id_for_database
  end
  include ::Thumbnail::GeneratedAliasAttributeMethods

  def blog: () -> ::Blog
  def blog=: (::Blog?) -> ::Blog?
  def reload_blog: () -> ::Blog?
  def build_blog: (untyped) -> ::Blog
  def create_blog: (untyped) -> ::Blog
  def create_blog!: (untyped) -> ::Blog
  module ::Thumbnail::GeneratedAssociationMethods
  end
  include ::Thumbnail::GeneratedAssociationMethods

  module ::Thumbnail::GeneratedRelationMethods
  end

  class ::Thumbnail::ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::Thumbnail::GeneratedRelationMethods
    include ::ActiveRecord::Relation::Methods[::Thumbnail, ::Integer]
    include ::Enumerable[::Thumbnail]
  end

  class ::Thumbnail::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::Enumerable[::Thumbnail]
    include ::Thumbnail::GeneratedRelationMethods
    include ::ActiveRecord::Relation::Methods[::Thumbnail, ::Integer]

    def build: (?::ActiveRecord::Associations::CollectionProxy::_EachPair attributes) ?{ () -> untyped } -> ::Thumbnail
             | (::Array[::ActiveRecord::Associations::CollectionProxy::_EachPair] attributes) ?{ () -> untyped } -> ::Array[::Thumbnail]
    def create: (?::ActiveRecord::Associations::CollectionProxy::_EachPair attributes) ?{ () -> untyped } -> ::Thumbnail
              | (::Array[::ActiveRecord::Associations::CollectionProxy::_EachPair] attributes) ?{ () -> untyped } -> ::Array[::Thumbnail]
    def create!: (?::ActiveRecord::Associations::CollectionProxy::_EachPair attributes) ?{ () -> untyped } -> ::Thumbnail
               | (::Array[::ActiveRecord::Associations::CollectionProxy::_EachPair] attributes) ?{ () -> untyped } -> ::Array[::Thumbnail]
    def reload: () -> ::Array[::Thumbnail]

    def replace: (::Array[::Thumbnail]) -> void
    def delete: (*::Thumbnail | ::Integer) -> ::Array[::Thumbnail]
    def destroy: (*::Thumbnail | ::Integer) -> ::Array[::Thumbnail]
    def <<: (*::Thumbnail | ::Array[::Thumbnail]) -> self
    def prepend: (*::Thumbnail | ::Array[::Thumbnail]) -> self
  end
end
