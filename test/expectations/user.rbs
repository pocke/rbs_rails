# resolve-type-names: false

class ::User < ::ApplicationRecord
  extend ::_ActiveRecord_Relation_ClassMethods[::User, ::User::ActiveRecord_Relation, ::Integer]

  module ::User::GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def id_before_type_cast: () -> ::Integer

    def id_for_database: () -> ::Integer

    def name: () -> ::String

    def name=: (::String) -> ::String

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ ::String?, ::String? ]

    def name_will_change!: () -> void

    def name_was: () -> ::String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> ::Array[::String?]?

    def name_previously_was: () -> ::String?

    def name_before_last_save: () -> ::String?

    def name_change_to_be_saved: () -> ::Array[::String?]?

    def name_in_database: () -> ::String?

    def saved_change_to_name: () -> ::Array[::String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def name_before_type_cast: () -> ::String

    def name_for_database: () -> ::String

    def age: () -> ::Integer

    def age=: (::Integer) -> ::Integer

    def age?: () -> bool

    def age_changed?: () -> bool

    def age_change: () -> [ ::Integer?, ::Integer? ]

    def age_will_change!: () -> void

    def age_was: () -> ::Integer?

    def age_previously_changed?: () -> bool

    def age_previous_change: () -> ::Array[::Integer?]?

    def age_previously_was: () -> ::Integer?

    def age_before_last_save: () -> ::Integer?

    def age_change_to_be_saved: () -> ::Array[::Integer?]?

    def age_in_database: () -> ::Integer?

    def saved_change_to_age: () -> ::Array[::Integer?]?

    def saved_change_to_age?: () -> bool

    def will_save_change_to_age?: () -> bool

    def restore_age!: () -> void

    def clear_age_change: () -> void

    def age_before_type_cast: () -> ::Integer

    def age_for_database: () -> ::Integer

    def status: () -> ::String

    def status=: (::String) -> ::String

    def status?: () -> bool

    def status_changed?: () -> bool

    def status_change: () -> [ ::String?, ::String? ]

    def status_will_change!: () -> void

    def status_was: () -> ::String?

    def status_previously_changed?: () -> bool

    def status_previous_change: () -> ::Array[::String?]?

    def status_previously_was: () -> ::String?

    def status_before_last_save: () -> ::String?

    def status_change_to_be_saved: () -> ::Array[::String?]?

    def status_in_database: () -> ::String?

    def saved_change_to_status: () -> ::Array[::String?]?

    def saved_change_to_status?: () -> bool

    def will_save_change_to_status?: () -> bool

    def restore_status!: () -> void

    def clear_status_change: () -> void

    def status_before_type_cast: () -> ::Integer

    def status_for_database: () -> ::Integer

    def phone_numbers: () -> ::Array[untyped]?

    def phone_numbers=: (::Array[untyped]?) -> ::Array[untyped]?

    def phone_numbers?: () -> bool

    def phone_numbers_changed?: () -> bool

    def phone_numbers_change: () -> [ ::Array[untyped]?, ::Array[untyped]? ]

    def phone_numbers_will_change!: () -> void

    def phone_numbers_was: () -> ::Array[untyped]?

    def phone_numbers_previously_changed?: () -> bool

    def phone_numbers_previous_change: () -> ::Array[::Array[untyped]?]?

    def phone_numbers_previously_was: () -> ::Array[untyped]?

    def phone_numbers_before_last_save: () -> ::Array[untyped]?

    def phone_numbers_change_to_be_saved: () -> ::Array[::Array[untyped]?]?

    def phone_numbers_in_database: () -> ::Array[untyped]?

    def saved_change_to_phone_numbers: () -> ::Array[::Array[untyped]?]?

    def saved_change_to_phone_numbers?: () -> bool

    def will_save_change_to_phone_numbers?: () -> bool

    def restore_phone_numbers!: () -> void

    def clear_phone_numbers_change: () -> void

    def phone_numbers_before_type_cast: () -> ::String?

    def phone_numbers_for_database: () -> ::String?

    def contact_info: () -> ::Hash[untyped, untyped]?

    def contact_info=: (::Hash[untyped, untyped]?) -> ::Hash[untyped, untyped]?

    def contact_info?: () -> bool

    def contact_info_changed?: () -> bool

    def contact_info_change: () -> [ ::Hash[untyped, untyped]?, ::Hash[untyped, untyped]? ]

    def contact_info_will_change!: () -> void

    def contact_info_was: () -> ::Hash[untyped, untyped]?

    def contact_info_previously_changed?: () -> bool

    def contact_info_previous_change: () -> ::Array[::Hash[untyped, untyped]?]?

    def contact_info_previously_was: () -> ::Hash[untyped, untyped]?

    def contact_info_before_last_save: () -> ::Hash[untyped, untyped]?

    def contact_info_change_to_be_saved: () -> ::Array[::Hash[untyped, untyped]?]?

    def contact_info_in_database: () -> ::Hash[untyped, untyped]?

    def saved_change_to_contact_info: () -> ::Array[::Hash[untyped, untyped]?]?

    def saved_change_to_contact_info?: () -> bool

    def will_save_change_to_contact_info?: () -> bool

    def restore_contact_info!: () -> void

    def clear_contact_info_change: () -> void

    def contact_info_before_type_cast: () -> ::String?

    def contact_info_for_database: () -> ::String?

    def family_tree: () -> untyped

    def family_tree=: (untyped) -> untyped

    def family_tree?: () -> bool

    def family_tree_changed?: () -> bool

    def family_tree_change: () -> [ untyped, untyped ]

    def family_tree_will_change!: () -> void

    def family_tree_was: () -> untyped

    def family_tree_previously_changed?: () -> bool

    def family_tree_previous_change: () -> ::Array[untyped]?

    def family_tree_previously_was: () -> untyped

    def family_tree_before_last_save: () -> untyped

    def family_tree_change_to_be_saved: () -> ::Array[untyped]?

    def family_tree_in_database: () -> untyped

    def saved_change_to_family_tree: () -> ::Array[untyped]?

    def saved_change_to_family_tree?: () -> bool

    def will_save_change_to_family_tree?: () -> bool

    def restore_family_tree!: () -> void

    def clear_family_tree_change: () -> void

    def family_tree_before_type_cast: () -> ::String?

    def family_tree_for_database: () -> ::String?

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def created_at_before_type_cast: () -> ::Time

    def created_at_for_database: () -> ::Time

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def updated_at_before_type_cast: () -> ::Time

    def updated_at_for_database: () -> ::Time
  end
  include ::User::GeneratedAttributeMethods
  module ::User::GeneratedAliasAttributeMethods
    include ::User::GeneratedAttributeMethods

    alias alias_name name

    alias alias_name= name=

    alias alias_name? name?

    alias alias_name_changed? name_changed?

    alias alias_name_change name_change

    alias alias_name_will_change! name_will_change!

    alias alias_name_was name_was

    alias alias_name_previously_changed? name_previously_changed?

    alias alias_name_previous_change name_previous_change

    alias alias_name_previously_was name_previously_was

    alias alias_name_before_last_save name_before_last_save

    alias alias_name_change_to_be_saved name_change_to_be_saved

    alias alias_name_in_database name_in_database

    alias saved_change_to_alias_name saved_change_to_name

    alias saved_change_to_alias_name? saved_change_to_name?

    alias will_save_change_to_alias_name? will_save_change_to_name?

    alias restore_alias_name! restore_name!

    alias clear_alias_name_change clear_name_change

    alias alias_name_before_type_cast name_before_type_cast

    alias alias_name_for_database name_for_database
  end
  include ::User::GeneratedAliasAttributeMethods

  def blogs: () -> ::Blog::ActiveRecord_Associations_CollectionProxy
  def blogs=: (::Blog::ActiveRecord_Associations_CollectionProxy | ::Array[::Blog]) -> (::Blog::ActiveRecord_Associations_CollectionProxy | ::Array[::Blog])
  def blog_ids: () -> ::Array[::Integer]
  def blog_ids=: (::Array[::Integer]) -> ::Array[::Integer]
  def avatar_attachment: () -> ::ActiveStorage::Attachment?
  def avatar_attachment=: (::ActiveStorage::Attachment?) -> ::ActiveStorage::Attachment?
  def build_avatar_attachment: (?untyped) -> ::ActiveStorage::Attachment
  def create_avatar_attachment: (?untyped) -> ::ActiveStorage::Attachment
  def create_avatar_attachment!: (?untyped) -> ::ActiveStorage::Attachment
  def reload_avatar_attachment: () -> ::ActiveStorage::Attachment?
  def avatar_blob: () -> ::ActiveStorage::Blob?
  def avatar_blob=: (::ActiveStorage::Blob?) -> ::ActiveStorage::Blob?
  def build_avatar_blob: (?untyped) -> ::ActiveStorage::Blob
  def create_avatar_blob: (?untyped) -> ::ActiveStorage::Blob
  def create_avatar_blob!: (?untyped) -> ::ActiveStorage::Blob
  def reload_avatar_blob: () -> ::ActiveStorage::Blob?

  module ::User::GeneratedAssociationMethods
    def avatar: () -> ::ActiveStorage::Attached::One

    def avatar=: (::ActionDispatch::Http::UploadedFile) -> ::ActionDispatch::Http::UploadedFile
               | (::Rack::Test::UploadedFile) -> ::Rack::Test::UploadedFile
               | (::ActiveStorage::Blob) -> ::ActiveStorage::Blob
               | (::String) -> ::String
               | ({ io: ::IO, filename: ::String, content_type: ::String? }) -> { io: ::IO, filename: ::String, content_type: ::String? }
               | (nil) -> nil
  end
  include ::User::GeneratedAssociationMethods
  module ::User::ActiveModel_SecurePassword_InstanceMethodsOnActivation_password
    attr_reader password: ::String?

    def password=: (::String) -> ::String

    def password_confirmation=: (::String) -> ::String

    def authenticate_password: (::String) -> (::User | false)

    alias authenticate authenticate_password
  end
  include ::User::ActiveModel_SecurePassword_InstanceMethodsOnActivation_password

  def temporary!: () -> bool
  def temporary?: () -> bool
  def accepted!: () -> bool
  def accepted?: () -> bool
  def self.statuses: () -> ::ActiveSupport::HashWithIndifferentAccess[::String, ::Integer]
  def self.temporary: () -> ::User::ActiveRecord_Relation
  def self.not_temporary: () -> ::User::ActiveRecord_Relation
  def self.accepted: () -> ::User::ActiveRecord_Relation
  def self.not_accepted: () -> ::User::ActiveRecord_Relation
  def self.all_kind_args: (untyped type, ?untyped m, ?untyped n, *untyped rest, untyped x, ?k: untyped, **untyped untyped) { (*untyped) -> untyped } -> ::User::ActiveRecord_Relation
  def self.no_arg: () -> ::User::ActiveRecord_Relation
  def self.popular: (?) -> ::User::ActiveRecord_Relation
  def self.with_attached_avatar: () -> ::User::ActiveRecord_Relation

  module ::User::GeneratedRelationMethods
    def statuses: () -> ::ActiveSupport::HashWithIndifferentAccess[::String, ::Integer]

    def temporary: () -> ::User::ActiveRecord_Relation

    def not_temporary: () -> ::User::ActiveRecord_Relation

    def accepted: () -> ::User::ActiveRecord_Relation

    def not_accepted: () -> ::User::ActiveRecord_Relation

    def all_kind_args: (untyped type, ?untyped m, ?untyped n, *untyped rest, untyped x, ?k: untyped, **untyped untyped) { (*untyped) -> untyped } -> ::User::ActiveRecord_Relation

    def no_arg: () -> ::User::ActiveRecord_Relation

    def popular: (?) -> ::User::ActiveRecord_Relation

    def with_attached_avatar: () -> ::User::ActiveRecord_Relation
  end

  class ::User::ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::User::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::User, ::Integer]
    include ::Enumerable[::User]
  end

  class ::User::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::Enumerable[::User]
    include ::User::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::User, ::Integer]

    def build: (?::ActiveRecord::Associations::CollectionProxy::_EachPair attributes) ?{ () -> untyped } -> ::User
             | (::Array[::ActiveRecord::Associations::CollectionProxy::_EachPair] attributes) ?{ () -> untyped } -> ::Array[::User]
    def create: (?::ActiveRecord::Associations::CollectionProxy::_EachPair attributes) ?{ () -> untyped } -> ::User
              | (::Array[::ActiveRecord::Associations::CollectionProxy::_EachPair] attributes) ?{ () -> untyped } -> ::Array[::User]
    def create!: (?::ActiveRecord::Associations::CollectionProxy::_EachPair attributes) ?{ () -> untyped } -> ::User
               | (::Array[::ActiveRecord::Associations::CollectionProxy::_EachPair] attributes) ?{ () -> untyped } -> ::Array[::User]
    def reload: () -> ::Array[::User]

    def replace: (::Array[::User]) -> void
    def delete: (*::User | ::Integer) -> ::Array[::User]
    def destroy: (*::User | ::Integer) -> ::Array[::User]
    def <<: (*::User | ::Array[::User]) -> self
    def prepend: (*::User | ::Array[::User]) -> self
  end
end
