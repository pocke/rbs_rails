class User < ::ApplicationRecord
  extend ::_ActiveRecord_Relation_ClassMethods[::User, ::User::ActiveRecord_Relation, ::Integer]

  module GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def name: () -> ::String

    def name=: (::String) -> ::String

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ ::String?, ::String? ]

    def name_will_change!: () -> void

    def name_was: () -> ::String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> ::Array[::String?]?

    def name_previously_was: () -> ::String?

    def name_before_last_save: () -> ::String?

    def name_change_to_be_saved: () -> ::Array[::String?]?

    def name_in_database: () -> ::String?

    def saved_change_to_name: () -> ::Array[::String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def age: () -> ::Integer

    def age=: (::Integer) -> ::Integer

    def age?: () -> bool

    def age_changed?: () -> bool

    def age_change: () -> [ ::Integer?, ::Integer? ]

    def age_will_change!: () -> void

    def age_was: () -> ::Integer?

    def age_previously_changed?: () -> bool

    def age_previous_change: () -> ::Array[::Integer?]?

    def age_previously_was: () -> ::Integer?

    def age_before_last_save: () -> ::Integer?

    def age_change_to_be_saved: () -> ::Array[::Integer?]?

    def age_in_database: () -> ::Integer?

    def saved_change_to_age: () -> ::Array[::Integer?]?

    def saved_change_to_age?: () -> bool

    def will_save_change_to_age?: () -> bool

    def restore_age!: () -> void

    def clear_age_change: () -> void

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def avatar_attachment: () -> ::ActiveStorage::Attachment?
  def avatar_attachment=: (::ActiveStorage::Attachment?) -> ::ActiveStorage::Attachment?
  def build_avatar_attachment: (?untyped) -> ::ActiveStorage::Attachment
  def create_avatar_attachment: (untyped) -> ::ActiveStorage::Attachment
  def create_avatar_attachment!: (untyped) -> ::ActiveStorage::Attachment
  def reload_avatar_attachment: () -> ::ActiveStorage::Attachment?
  def avatar_blob: () -> ::ActiveStorage::Blob?
  def avatar_blob=: (::ActiveStorage::Blob?) -> ::ActiveStorage::Blob?
  def build_avatar_blob: (?untyped) -> ::ActiveStorage::Blob
  def create_avatar_blob: (untyped) -> ::ActiveStorage::Blob
  def create_avatar_blob!: (untyped) -> ::ActiveStorage::Blob
  def reload_avatar_blob: () -> ::ActiveStorage::Blob?

  module GeneratedAssociationMethods
    def avatar: () -> ::ActiveStorage::Attached::One

    def avatar=: (::ActionDispatch::Http::UploadedFile) -> ::ActionDispatch::Http::UploadedFile
               | (::Rack::Test::UploadedFile) -> ::Rack::Test::UploadedFile
               | (::ActiveStorage::Blob) -> ::ActiveStorage::Blob
               | (::String) -> ::String
               | ({ io: ::IO, filename: ::String, content_type: ::String? }) -> { io: ::IO, filename: ::String, content_type: ::String? }
               | (nil) -> nil
  end
  include GeneratedAssociationMethods
  module ActiveModel_SecurePassword_InstanceMethodsOnActivation_password
    attr_reader password: String?

    def password=: (String) -> String

    def password_confirmation=: (String) -> String

    def authenticate_password: (String) -> (::User | false)

    alias authenticate authenticate_password
  end
  include ActiveModel_SecurePassword_InstanceMethodsOnActivation_password

  def accepted!: () -> bool
  def accepted?: () -> bool
  def temporary!: () -> bool
  def temporary?: () -> bool
  def self.accepted: () -> ::User::ActiveRecord_Relation
  def self.temporary: () -> ::User::ActiveRecord_Relation
  def self.all_kind_args: (untyped type, ?untyped m, ?untyped n, *untyped rest, untyped x, ?k: untyped, **untyped untyped) { (*untyped) -> untyped } -> ::User::ActiveRecord_Relation
  def self.no_arg: () -> ::User::ActiveRecord_Relation
  def self.with_attached_avatar: () -> ::User::ActiveRecord_Relation

  module GeneratedRelationMethods
    def accepted: () -> ::User::ActiveRecord_Relation

    def temporary: () -> ::User::ActiveRecord_Relation

    def all_kind_args: (untyped type, ?untyped m, ?untyped n, *untyped rest, untyped x, ?k: untyped, **untyped untyped) { (*untyped) -> untyped } -> ::User::ActiveRecord_Relation

    def no_arg: () -> ::User::ActiveRecord_Relation

    def with_attached_avatar: () -> ::User::ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::User::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::User, ::Integer]
    include ::Enumerable[::User]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::User::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::User, ::Integer]
  end
end
